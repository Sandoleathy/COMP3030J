// vite.config.ts
import { defineConfig } from "file:///C:/Users/32964/Desktop/2023-2024%20Develop/2024%E8%BD%AF%E5%B7%A5%E8%AF%BE%E8%AE%BE2/Project/COMP3030J/comp3030j-front/node_modules/vite/dist/node/index.js";

// vite/plugins/index.js
import vue from "file:///C:/Users/32964/Desktop/2023-2024%20Develop/2024%E8%BD%AF%E5%B7%A5%E8%AF%BE%E8%AE%BE2/Project/COMP3030J/comp3030j-front/node_modules/@vitejs/plugin-vue/dist/index.mjs";

// vite/plugins/auto-import.js
import autoImport from "file:///C:/Users/32964/Desktop/2023-2024%20Develop/2024%E8%BD%AF%E5%B7%A5%E8%AF%BE%E8%AE%BE2/Project/COMP3030J/comp3030j-front/node_modules/unplugin-auto-import/dist/vite.js";
function createAutoImport() {
  return autoImport({
    imports: [
      "vue",
      "vue-router",
      "pinia"
    ],
    dts: false
  });
}

// vite/plugins/svg-icon.js
import { createSvgIconsPlugin } from "file:///C:/Users/32964/Desktop/2023-2024%20Develop/2024%E8%BD%AF%E5%B7%A5%E8%AF%BE%E8%AE%BE2/Project/COMP3030J/comp3030j-front/node_modules/vite-plugin-svg-icons/dist/index.mjs";
import path from "path";
function createSvgIcon(isBuild) {
  return createSvgIconsPlugin({
    iconDirs: [path.resolve(process.cwd(), "src/assets/icons/svg")],
    symbolId: "icon-[dir]-[name]",
    svgoOptions: isBuild
  });
}

// vite/plugins/compression.js
import compression from "file:///C:/Users/32964/Desktop/2023-2024%20Develop/2024%E8%BD%AF%E5%B7%A5%E8%AF%BE%E8%AE%BE2/Project/COMP3030J/comp3030j-front/node_modules/vite-plugin-compression/dist/index.mjs";
function createCompression(env) {
  const { VITE_BUILD_COMPRESS } = env;
  const plugin = [];
  if (VITE_BUILD_COMPRESS) {
    const compressList = VITE_BUILD_COMPRESS.split(",");
    if (compressList.includes("gzip")) {
      plugin.push(
        compression({
          ext: ".gz",
          deleteOriginFile: false
        })
      );
    }
    if (compressList.includes("brotli")) {
      plugin.push(
        compression({
          ext: ".br",
          algorithm: "brotliCompress",
          deleteOriginFile: false
        })
      );
    }
  }
  return plugin;
}

// vite/plugins/setup-extend.js
import setupExtend from "file:///C:/Users/32964/Desktop/2023-2024%20Develop/2024%E8%BD%AF%E5%B7%A5%E8%AF%BE%E8%AE%BE2/Project/COMP3030J/comp3030j-front/node_modules/unplugin-vue-setup-extend-plus/dist/vite.js";
function createSetupExtend() {
  return setupExtend({});
}

// vite/plugins/index.js
import vueJsx from "file:///C:/Users/32964/Desktop/2023-2024%20Develop/2024%E8%BD%AF%E5%B7%A5%E8%AF%BE%E8%AE%BE2/Project/COMP3030J/comp3030j-front/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
function createVitePlugins(viteEnv, isBuild = false) {
  const vitePlugins = [vue(), vueJsx()];
  vitePlugins.push(createAutoImport());
  vitePlugins.push(createSetupExtend());
  vitePlugins.push(createSvgIcon(isBuild));
  isBuild && vitePlugins.push(...createCompression(viteEnv));
  return vitePlugins;
}

// vite.config.ts
import path2 from "path";
var __vite_injected_original_dirname = "C:\\Users\\32964\\Desktop\\2023-2024 Develop\\2024\u8F6F\u5DE5\u8BFE\u8BBE2\\Project\\COMP3030J\\comp3030j-front";
var vite_config_default = defineConfig({
  plugins: createVitePlugins("dev", true),
  server: {
    port: 5173,
    // 开发服务器端口
    proxy: {
      "/api": {
        //所有向后端项目的请求都直接使用/api，不要用localhost:8080，否则会触发跨域请求报错
        target: "http://localhost:8080",
        changeOrigin: true,
        rewrite: (path3) => path3.replace(/^\/api/, "")
        // 路径重写规则
      }
    }
  },
  resolve: {
    alias: {
      "@": path2.resolve(__vite_injected_original_dirname, "./src")
    },
    // https://cn.vitejs.dev/config/#resolve-extensions
    extensions: [".mjs", ".js", ".ts", ".jsx", ".tsx", ".json", ".vue"]
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
